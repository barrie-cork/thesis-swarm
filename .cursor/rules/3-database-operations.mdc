---
description: 
globs: 
alwaysApply: true
---
# 3. Thesis Grey Database, Entities, and Operations

This document covers how Thesis Grey uses Wasp's database, entities, and operations architecture for its specific needs.

## Thesis Grey Database and Entities

- Thesis Grey uses PostgreSQL with Prisma for database access.
- Entity models are defined directly in `main.wasp` using the entity syntax.
- The core entities include:
  - `User`: Authentication and user identification
  - `SearchSession`: Top-level container for search workflows
  - `SearchQuery`: Individual search queries within a session
  - `SearchExecution`: Records of search query executions
  - `RawSearchResult`: Unprocessed results from search engines
  - `ProcessedResult`: Normalized search results with metadata
  - `DuplicateRelationship`: Records of duplicate results
  - `ReviewTag`: Tags for categorizing results
  - `ReviewTagAssignment`: Many-to-many relationship between results and tags
  - `Note`: User annotations on results

## Entity Relationships in Thesis Grey

- `User` to `SearchSession`: One-to-many (User owns multiple search sessions)
- `SearchSession` to `SearchQuery`: One-to-many (Session contains multiple queries)
- `SearchQuery` to `SearchExecution`: One-to-many (Query can be executed multiple times)
- `SearchExecution` to `RawSearchResult`: One-to-many (Execution produces multiple results)
- `RawSearchResult` to `ProcessedResult`: One-to-one (Each raw result is processed once)
- `ProcessedResult` to `ReviewTagAssignment`: One-to-many (Results can have multiple tags)
- `ReviewTag` to `ReviewTagAssignment`: One-to-many (Tag can be applied to multiple results)
- `ProcessedResult` to `DuplicateRelationship`: One-to-many bidirectional (Results can be duplicates of other results)

## Using Entities in Thesis Grey Operations

The core operations in Thesis Grey include:

### Search Strategy Operations

- Query `getSearchSessions`:
  ```typescript
  // In src/server/searchStrategy/queries.js
  export const getSearchSessions = async (args, context) => {
    if (!context.user) {
      throw new HttpError(401, "Unauthorized");
    }
    
    return context.entities.SearchSession.findMany({
      where: { userId: context.user.id },
      orderBy: { updatedAt: 'desc' }
    });
  };
  ```

- Action `createSearchSession`:
  ```typescript
  // In src/server/searchStrategy/actions.js
  export const createSearchSession = async ({ name, description }, context) => {
    if (!context.user) {
      throw new HttpError(401, "Unauthorized");
    }
    
    return context.entities.SearchSession.create({
      data: {
        name,
        description,
        userId: context.user.id
      }
    });
  };
  ```

### SERP Execution Operations

- Action `executeSearchQuery`:
  ```typescript
  // In src/server/serpExecution/actions.js
  export const executeSearchQuery = async ({ queryId }, context) => {
    if (!context.user) {
      throw new HttpError(401, "Unauthorized");
    }
    
    const query = await context.entities.SearchQuery.findUnique({
      where: { id: queryId },
      include: { searchSession: true }
    });
    
    if (!query) {
      throw new HttpError(404, "Query not found");
    }
    
    if (query.searchSession.userId !== context.user.id) {
      throw new HttpError(403, "Access denied");
    }
    
    // Create execution record
    const execution = await context.entities.SearchExecution.create({
      data: {
        queryId,
        sessionId: query.sessionId,
        status: 'running'
      }
    });
    
    // Logic to execute search in background
    
    return execution;
  };
  ```

### Results Manager Operations

- Action `processSessionResults`:
  ```typescript
  // In src/server/resultsManager/actions.js
  export const processSessionResults = async ({ sessionId }, context) => {
    if (!context.user) {
      throw new HttpError(401, "Unauthorized");
    }
    
    const session = await context.entities.SearchSession.findUnique({
      where: { id: sessionId }
    });
    
    if (!session || session.userId !== context.user.id) {
      throw new HttpError(403, "Access denied");
    }
    
    // Process raw results into normalized results
    // Detect duplicates
    // Return processing summary
  };
  ```

## Client-Side Operation Usage in Thesis Grey

- Using Queries:
  ```tsx
  // In src/client/searchStrategy/pages/SearchStrategyPage.tsx
  import { useQuery } from 'wasp/client/operations';
  import { getSearchSessions } from 'wasp/client/operations';
  
  export function SearchStrategyPage() {
    const { data: sessions, isLoading, error } = useQuery(getSearchSessions);
    
    if (isLoading) return <div>Loading...</div>;
    if (error) return <div>Error: {error.message}</div>;
    
    return (
      <div>
        {sessions.map(session => (
          <SessionCard key={session.id} session={session} />
        ))}
      </div>
    );
  }
  ```

- Using Actions:
  ```tsx
  // In a component
  import { createSearchSession } from 'wasp/client/operations';
  
  // In a component method
  const handleCreateSession = async () => {
    try {
      await createSearchSession({ 
        name: sessionName,
        description
      });
      // Handle success
    } catch (error) {
      // Handle error
    }
  };
  ```

## Authorization Pattern

All operations in Thesis Grey follow a consistent authorization pattern:

1. Check if user is authenticated
2. Verify ownership of the resource being accessed
3. Perform the operation only if authorized

```typescript
// Template pattern used throughout Thesis Grey
export const someOperation = async (args, context) => {
  // 1. Check authentication
  if (!context.user) {
    throw new HttpError(401, "Unauthorized");
  }
  
  // 2. Fetch the resource
  const resource = await context.entities.Resource.findUnique({
    where: { id: args.resourceId }
  });
  
  // 3. Verify ownership/permissions
  if (!resource || resource.userId !== context.user.id) {
    throw new HttpError(403, "Access denied");
  }
  
  // 4. Proceed with operation
  // ...
}
```

This consistent pattern ensures that all data access is properly authorized throughout the application. 