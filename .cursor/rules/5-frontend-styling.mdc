---
description: 
globs: 
alwaysApply: true
---
# 5. Thesis Grey Frontend and Styling

This document outlines the conventions for building the Thesis Grey user interface with React and styling it with Tailwind CSS.

## React Components Structure

Thesis Grey organizes its React components by feature:

```
src/client/
├── auth/                  # Authentication-related components
│   ├── components/        # Reusable auth components
│   └── pages/             # Auth pages (Login, Signup, Profile)
├── searchStrategy/        # Search strategy builder components
│   ├── components/        # Session management components 
│   └── pages/             # Search strategy pages
├── serpExecution/         # Search execution components
│   ├── components/        # Execution UI components
│   └── pages/             # Execution pages
├── resultsManager/        # Results processing components
│   ├── components/        # Results list and processing components
│   └── pages/             # Results management pages
├── reviewResults/         # Review interface components
│   ├── components/        # Tagging and review components
│   └── pages/             # Review pages
├── reporting/             # Reporting components
│   ├── components/        # PRISMA flow and statistics components
│   └── pages/             # Reporting pages
├── components/            # Shared application components
│   ├── layout/            # Layout components (Navbar, Sidebar)
│   └── ui/                # Reusable UI components
└── pages/                 # Top-level pages (Home)
```

## Common Component Patterns

### Page Components

Page components in Thesis Grey follow this pattern:

```tsx
// src/client/featureName/pages/FeaturePage.tsx
import { useQuery } from 'wasp/client/operations';
import { getSomeData } from 'wasp/client/operations';
import { PageHeader } from '../../components/layout/PageHeader';
import { FeatureComponent } from '../components/FeatureComponent';

export function FeaturePage() {
  const { data, isLoading, error } = useQuery(getSomeData);
  
  if (isLoading) return <div className="p-4">Loading...</div>;
  if (error) return <div className="p-4 text-red-600">Error: {error.message}</div>;
  
  return (
    <div className="container mx-auto p-4">
      <PageHeader title="Feature Title" />
      <FeatureComponent data={data} />
    </div>
  );
}
```

### Reusable Components

Reusable components are broken down by responsibility and stored in feature-specific `components` directories:

```tsx
// src/client/featureName/components/ComponentName.tsx
import { useState } from 'react';

type ComponentProps = {
  data: SomeType[];
  onAction: (id: string) => void;
};

export function ComponentName({ data, onAction }: ComponentProps) {
  const [selectedId, setSelectedId] = useState<string | null>(null);
  
  return (
    <div className="rounded-lg bg-white shadow p-4">
      {/* Component content */}
    </div>
  );
}
```

## TailwindCSS Usage in Thesis Grey

Thesis Grey uses Tailwind CSS for all styling with these conventions:

### Common UI Patterns

- **Containers**: `container mx-auto p-4`
- **Cards**: `rounded-lg bg-white shadow p-4`
- **Buttons**: 
  - Primary: `bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700`
  - Secondary: `bg-gray-200 text-gray-800 px-4 py-2 rounded-md hover:bg-gray-300`
  - Danger: `bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700`
- **Forms**:
  - Input: `w-full rounded-md border-gray-300 shadow-sm px-3 py-2`
  - Label: `block text-sm font-medium text-gray-700 mb-1`
  - Form Group: `mb-4`

### Feature-Specific UI Components

#### Search Strategy Builder

The search strategy builder uses a card-based UI for sessions and queries:

```tsx
// Session list component example
export function SessionList({ sessions }) {
  return (
    <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
      {sessions.map(session => (
        <div key={session.id} className="rounded-lg bg-white shadow p-4 hover:shadow-md transition">
          <h3 className="text-lg font-medium">{session.name}</h3>
          <p className="text-gray-600 mt-1">{session.description || 'No description'}</p>
          <div className="mt-4 flex justify-between">
            <span className="text-sm text-gray-500">
              {session.searchQueries.length} queries
            </span>
            <Link 
              to={`/search-execution/${session.id}`}
              className="text-indigo-600 hover:text-indigo-800"
            >
              View Session
            </Link>
          </div>
        </div>
      ))}
    </div>
  );
}
```

#### Results Review Interface

The review interface uses a split-panel design with tagging functionality:

```tsx
// Example tag component
export function TagList({ tags, onTagSelect, selectedTagId }) {
  return (
    <div className="flex flex-wrap gap-2 mb-4">
      {tags.map(tag => (
        <button
          key={tag.id}
          onClick={() => onTagSelect(tag.id)}
          className={`px-3 py-1 rounded-full text-sm ${
            selectedTagId === tag.id
              ? 'bg-opacity-100'
              : 'bg-opacity-50 hover:bg-opacity-70'
          }`}
          style={{ backgroundColor: tag.color, color: getContrastColor(tag.color) }}
        >
          {tag.name}
        </button>
      ))}
    </div>
  );
}
```

## Responsive Design

Thesis Grey implements responsive design using Tailwind's breakpoint system:

- Mobile-first approach with progressive enhancement
- Key breakpoints:
  - `sm`: 640px (small devices)
  - `md`: 768px (medium devices)
  - `lg`: 1024px (large devices)
  - `xl`: 1280px (extra large devices)

Example responsive layout:

```tsx
<div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
  {/* Content that changes from 1 to 2 to 3 columns based on screen size */}
</div>
```

## Form Handling

Forms in Thesis Grey follow this pattern:

```tsx
// Form component example
export function CreateSessionForm({ onSubmit }) {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await onSubmit({ name, description });
      setName('');
      setDescription('');
    } catch (error) {
      console.error('Error creating session:', error);
    }
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
          Session Name
        </label>
        <input
          id="name"
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
          className="w-full rounded-md border-gray-300 shadow-sm px-3 py-2"
        />
      </div>
      
      <div>
        <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
          Description (optional)
        </label>
        <textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          rows={3}
          className="w-full rounded-md border-gray-300 shadow-sm px-3 py-2"
        />
      </div>
      
      <button
        type="submit"
        className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700"
      >
        Create Session
      </button>
    </form>
  );
}
```
