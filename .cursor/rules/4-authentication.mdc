---
description: 
globs: 
alwaysApply: true
---
# 4. Thesis Grey Authentication

This document details how authentication is implemented and used within the Thesis Grey application.

## Authentication Setup in Thesis Grey

Thesis Grey uses Wasp's built-in username/password authentication system:

```wasp
// In main.wasp
app ThesisGrey {
  // ... other config
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}
```

The Thesis Grey authentication system consists of:

- The `User` entity that stores user information
- Login and signup pages with Wasp's authentication forms
- Protected routes through the `authRequired: true` property
- Authorization checks in server operations

## Authentication Pages

### Login Page

```tsx
// src/client/auth/pages/LoginPage.tsx
import { LoginForm } from 'wasp/client/auth';

export function LoginPage() {
  return (
    <div className="flex min-h-screen flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
          Log in to Thesis Grey
        </h2>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white px-4 py-8 shadow sm:rounded-lg sm:px-10">
          <LoginForm/>
        </div>
      </div>
    </div>
  );
}
```

### Signup Page

```tsx
// src/client/auth/pages/SignupPage.tsx
import { SignupForm } from 'wasp/client/auth';

export function SignupPage() {
  return (
    <div className="flex min-h-screen flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
          Create an account
        </h2>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white px-4 py-8 shadow sm:rounded-lg sm:px-10">
          <SignupForm/>
        </div>
      </div>
    </div>
  );
}
```

## Protected Routes

Routes that require authentication in Thesis Grey use the `authRequired` property:

```wasp
// In main.wasp
page SearchStrategyPage {
  authRequired: true,
  component: import { SearchStrategyPage } from "@src/client/searchStrategy/pages/SearchStrategyPage"
}

page SearchExecutionPage {
  authRequired: true,
  component: import { SearchExecutionPage } from "@src/client/serpExecution/pages/SearchExecutionPage"
}

// ... other protected pages
```

## Client-Side Authentication

Thesis Grey uses the `useAuth` hook to access user information in React components:

```tsx
// Example component that uses authentication data
import { useAuth } from 'wasp/client/auth';

export function ProfilePage() {
  const { data: user, isLoading, error } = useAuth();
  
  if (isLoading) return <div>Loading...</div>;
  if (error || !user) return <div>Error: {error?.message}</div>;
  
  return (
    <div>
      <h1>Profile</h1>
      <p>Username: {user.username}</p>
      {/* Other profile information */}
    </div>
  );
}
```

## Navigation & Auth-Aware Components

Thesis Grey implements auth-aware navigation to show different options based on authentication status:

```tsx
// src/client/components/NavBar.tsx
import { Link } from 'react-router-dom';
import { useAuth, logout } from 'wasp/client/auth';

export function NavBar() {
  const { data: user } = useAuth();
  
  return (
    <nav className="bg-gray-800 text-white p-4">
      <div className="container mx-auto flex justify-between items-center">
        <Link to="/" className="text-xl font-bold">Thesis Grey</Link>
        
        <div className="flex space-x-4">
          {user ? (
            <>
              <Link to="/search-strategy">Search Sessions</Link>
              <Link to="/profile">Profile</Link>
              <button 
                onClick={logout}
                className="bg-red-600 px-3 py-1 rounded hover:bg-red-700"
              >
                Logout
              </button>
            </>
          ) : (
            <>
              <Link to="/login">Login</Link>
              <Link to="/signup">Sign Up</Link>
            </>
          )}
        </div>
      </div>
    </nav>
  );
}
```

## Server-Side Authorization

All Thesis Grey operations incorporate consistent authorization checks:

```typescript
// Example authorization pattern in operations
export const getSearchSession = async ({ id }, context) => {
  // 1. Check if user is authenticated
  if (!context.user) {
    throw new HttpError(401, "Unauthorized");
  }
  
  // 2. Fetch the requested resource
  const session = await context.entities.SearchSession.findUnique({
    where: { id }
  });
  
  // 3. Verify resource exists and user has access
  if (!session) {
    throw new HttpError(404, "Session not found");
  }
  
  if (session.userId !== context.user.id) {
    throw new HttpError(403, "You don't have access to this session");
  }
  
  // 4. Proceed with operation
  return session;
};
```

## Authentication Best Practices in Thesis Grey

1. **Never Skip Auth Checks**: Every server operation must verify authentication and authorization
2. **Protected Routes**: Always use `authRequired: true` for pages that should be accessible only to logged-in users
3. **User-Specific Data**: Always filter queries by the current user's ID to ensure data isolation
4. **Clean Error Messages**: Provide clear but not overly detailed error messages for security
5. **Handle Loading States**: Always handle loading and error states in components using authentication data

These patterns ensure that Thesis Grey maintains a secure authentication model throughout the application.
