app ThesisGrey {
  title: "Thesis Grey",
  wasp: { version: "^0.16.0" },
  db: {
    system: PostgreSQL,
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/review-manager"
  },
  dependencies: [
    ("axios", "1.4.0")
  ],
  devDependencies: [
    ("autoprefixer", "10.4.14"),
    ("postcss", "8.4.27"),
    ("tailwindcss", "3.3.3")
  ]
}

// Routes for Phase 1
route ReviewManagerRoute { path: "/review-manager", to: ReviewManagerPage }
route LoginRoute { path: "/login", to: LoginPage }
route SignupRoute { path: "/signup", to: SignupPage }
route ProfileRoute { path: "/profile", to: ProfilePage }
route SearchStrategyRoute { path: "/search-strategy/:sessionId", to: SearchStrategyPage }
route SearchExecutionRoute { path: "/search-execution/:sessionId", to: SearchExecutionPage }
route ResultsManagerRoute { path: "/results/:sessionId", to: ResultsManagerPage }

// Pages for Phase 1
page ReviewManagerPage {
  authRequired: true,
  component: import { ReviewManagerPage } from "@src/client/reviewManager/pages/ReviewManagerPage"
}

page LoginPage {
  component: import { LoginPage } from "@src/client/auth/pages/LoginPage"
}

page SignupPage {
  component: import { SignupPage } from "@src/client/auth/pages/SignupPage"
}

page ProfilePage {
  authRequired: true,
  component: import { ProfilePage } from "@src/client/auth/pages/ProfilePage"
}

page SearchStrategyPage {
  authRequired: true,
  component: import { SearchStrategyPage } from "@src/client/searchStrategy/pages/SearchStrategyPage"
}

page SearchExecutionPage {
  authRequired: true,
  component: import { SearchExecutionPage } from "@src/client/serpExecution/pages/SearchExecutionPage"
}

page ResultsManagerPage {
  authRequired: true,
  component: import { ResultsManagerPage } from "@src/client/resultsManager/pages/ResultsManagerPage"
}

// Queries for Phase 1
query getSearchSessions {
  fn: import { getSearchSessions } from "@src/server/searchStrategy/queries.js",
  entities: [SearchSession]
}

query getSearchSession {
  fn: import { getSearchSession } from "@src/server/searchStrategy/queries.js",
  entities: [SearchSession, SearchQuery]
}

query getSearchQueries {
  fn: import { getSearchQueries } from "@src/server/serpExecution/queries.js",
  entities: [SearchQuery]
}

query getSearchExecutions {
  fn: import { getSearchExecutions } from "@src/server/serpExecution/queries.js",
  entities: [SearchExecution]
}

query getRawResults {
  fn: import { getRawResults } from "@src/server/resultsManager/queries.js",
  entities: [RawSearchResult]
}

query getProcessedResults {
  fn: import { getProcessedResults } from "@src/server/resultsManager/queries.js",
  entities: [ProcessedResult]
}

query getUserProfile {
  fn: import { getUserProfile } from "@src/server/auth/queries.js",
  entities: [User]
}

query getUserSearchSessions {
  fn: import { getUserSearchSessions } from "@src/server/auth/queries.js",
  entities: [SearchSession]
}

// Actions for Phase 1
action createSearchSession {
  fn: import { createSearchSession } from "@src/server/searchStrategy/actions.js",
  entities: [SearchSession]
}

action createSearchQuery {
  fn: import { createSearchQuery } from "@src/server/searchStrategy/actions.js",
  entities: [SearchQuery]
}

action updateSearchQuery {
  fn: import { updateSearchQuery } from "@src/server/searchStrategy/actions.js",
  entities: [SearchQuery]
}

action executeSearchQuery {
  fn: import { executeSearchQuery } from "@src/server/serpExecution/actions.js",
  entities: [SearchQuery, SearchExecution, RawSearchResult]
}

action processSessionResults {
  fn: import { processSessionResults } from "@src/server/resultsManager/actions.js",
  entities: [RawSearchResult, ProcessedResult, DuplicateRelationship]
}

action updateUserProfile {
  fn: import { updateUserProfile } from "@src/server/auth/actions.js",
  entities: [User]
}

action changePassword {
  fn: import { changePassword } from "@src/server/auth/actions.js",
  entities: [User]
}
